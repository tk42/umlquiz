// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	umlquiz "github.com/tk42/umlquiz/backend/gen/proto/golang/github.com/tk42/umlquiz"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserRepository) Create(arg0 context.Context, arg1 *umlquiz.AddUserRequest) (*umlquiz.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*umlquiz.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIUserRepository) Delete(arg0 context.Context, arg1 *umlquiz.UserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserRepository)(nil).Delete), arg0, arg1)
}

// Find mocks base method.
func (m *MockIUserRepository) Find(arg0 context.Context, arg1 *umlquiz.UserRequest) (*umlquiz.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*umlquiz.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIUserRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIUserRepository)(nil).Find), arg0, arg1)
}

// Update mocks base method.
func (m *MockIUserRepository) Update(arg0 context.Context, arg1 *umlquiz.UpdateUserRequest) (*umlquiz.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*umlquiz.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIUserRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserRepository)(nil).Update), arg0, arg1)
}

// MockIQuizRepository is a mock of IQuizRepository interface.
type MockIQuizRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIQuizRepositoryMockRecorder
}

// MockIQuizRepositoryMockRecorder is the mock recorder for MockIQuizRepository.
type MockIQuizRepositoryMockRecorder struct {
	mock *MockIQuizRepository
}

// NewMockIQuizRepository creates a new mock instance.
func NewMockIQuizRepository(ctrl *gomock.Controller) *MockIQuizRepository {
	mock := &MockIQuizRepository{ctrl: ctrl}
	mock.recorder = &MockIQuizRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQuizRepository) EXPECT() *MockIQuizRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIQuizRepository) Create(arg0 context.Context, arg1 *umlquiz.AddQuizRequest) (*umlquiz.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*umlquiz.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIQuizRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIQuizRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIQuizRepository) Delete(arg0 context.Context, arg1 *umlquiz.DeleteQuizRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIQuizRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIQuizRepository)(nil).Delete), arg0, arg1)
}

// Find mocks base method.
func (m *MockIQuizRepository) Find(arg0 context.Context, arg1 *umlquiz.FindQuizRequest) (*umlquiz.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*umlquiz.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIQuizRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIQuizRepository)(nil).Find), arg0, arg1)
}

// Update mocks base method.
func (m *MockIQuizRepository) Update(arg0 context.Context, arg1 *umlquiz.UpdateQuizRequest) (*umlquiz.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*umlquiz.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIQuizRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIQuizRepository)(nil).Update), arg0, arg1)
}

// UpdateLike mocks base method.
func (m *MockIQuizRepository) UpdateLike(arg0 context.Context, arg1 *umlquiz.LikeQuizRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLike indicates an expected call of UpdateLike.
func (mr *MockIQuizRepositoryMockRecorder) UpdateLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLike", reflect.TypeOf((*MockIQuizRepository)(nil).UpdateLike), arg0, arg1)
}

// MockIReportRepository is a mock of IReportRepository interface.
type MockIReportRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIReportRepositoryMockRecorder
}

// MockIReportRepositoryMockRecorder is the mock recorder for MockIReportRepository.
type MockIReportRepositoryMockRecorder struct {
	mock *MockIReportRepository
}

// NewMockIReportRepository creates a new mock instance.
func NewMockIReportRepository(ctrl *gomock.Controller) *MockIReportRepository {
	mock := &MockIReportRepository{ctrl: ctrl}
	mock.recorder = &MockIReportRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReportRepository) EXPECT() *MockIReportRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIReportRepository) Create(arg0 context.Context, arg1 *umlquiz.AddReportRequest) (*umlquiz.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*umlquiz.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIReportRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIReportRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIReportRepository) Delete(arg0 context.Context, arg1 *umlquiz.DeleteReportRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIReportRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIReportRepository)(nil).Delete), arg0, arg1)
}

// Find mocks base method.
func (m *MockIReportRepository) Find(arg0 context.Context, arg1 *umlquiz.FindReportsRequest) ([]*umlquiz.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].([]*umlquiz.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIReportRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIReportRepository)(nil).Find), arg0, arg1)
}

// Update mocks base method.
func (m *MockIReportRepository) Update(arg0 context.Context, arg1 *umlquiz.UpdateReportRequest) (*umlquiz.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*umlquiz.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIReportRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIReportRepository)(nil).Update), arg0, arg1)
}
