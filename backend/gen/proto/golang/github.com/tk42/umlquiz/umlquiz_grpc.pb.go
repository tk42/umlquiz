// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: umlquiz.proto

package umlquiz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UMLQuizServiceClient is the client API for UMLQuizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UMLQuizServiceClient interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	FindUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	AddQuiz(ctx context.Context, in *AddQuizRequest, opts ...grpc.CallOption) (*QuizResponse, error)
	FindQuiz(ctx context.Context, in *FindQuizRequest, opts ...grpc.CallOption) (*QuizResponse, error)
	UpdateQuiz(ctx context.Context, in *UpdateQuizRequest, opts ...grpc.CallOption) (*QuizResponse, error)
	DeleteQuiz(ctx context.Context, in *DeleteQuizRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	ListQuizzesAll(ctx context.Context, in *ListQuizzesAllRequest, opts ...grpc.CallOption) (*QuizzesResponse, error)
	ListQuizzesByUser(ctx context.Context, in *ListQuizzesByUserRequest, opts ...grpc.CallOption) (*QuizzesResponse, error)
	SolveQuiz(ctx context.Context, in *SolveQuizRequest, opts ...grpc.CallOption) (*SolveResponse, error)
	LikeQuiz(ctx context.Context, in *LikeQuizRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	AddReport(ctx context.Context, in *AddReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	FindReports(ctx context.Context, in *FindReportsRequest, opts ...grpc.CallOption) (*ReportsResponse, error)
	UpdateReport(ctx context.Context, in *UpdateReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
}

type uMLQuizServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUMLQuizServiceClient(cc grpc.ClientConnInterface) UMLQuizServiceClient {
	return &uMLQuizServiceClient{cc}
}

func (c *uMLQuizServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) FindUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/FindUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) AddQuiz(ctx context.Context, in *AddQuizRequest, opts ...grpc.CallOption) (*QuizResponse, error) {
	out := new(QuizResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/AddQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) FindQuiz(ctx context.Context, in *FindQuizRequest, opts ...grpc.CallOption) (*QuizResponse, error) {
	out := new(QuizResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/FindQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) UpdateQuiz(ctx context.Context, in *UpdateQuizRequest, opts ...grpc.CallOption) (*QuizResponse, error) {
	out := new(QuizResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/UpdateQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) DeleteQuiz(ctx context.Context, in *DeleteQuizRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/DeleteQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) ListQuizzesAll(ctx context.Context, in *ListQuizzesAllRequest, opts ...grpc.CallOption) (*QuizzesResponse, error) {
	out := new(QuizzesResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/ListQuizzesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) ListQuizzesByUser(ctx context.Context, in *ListQuizzesByUserRequest, opts ...grpc.CallOption) (*QuizzesResponse, error) {
	out := new(QuizzesResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/ListQuizzesByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) SolveQuiz(ctx context.Context, in *SolveQuizRequest, opts ...grpc.CallOption) (*SolveResponse, error) {
	out := new(SolveResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/SolveQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) LikeQuiz(ctx context.Context, in *LikeQuizRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/LikeQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) AddReport(ctx context.Context, in *AddReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/AddReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) FindReports(ctx context.Context, in *FindReportsRequest, opts ...grpc.CallOption) (*ReportsResponse, error) {
	out := new(ReportsResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/FindReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) UpdateReport(ctx context.Context, in *UpdateReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/UpdateReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uMLQuizServiceClient) DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, "/umlquiz.UMLQuizService/DeleteReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UMLQuizServiceServer is the server API for UMLQuizService service.
// All implementations should embed UnimplementedUMLQuizServiceServer
// for forward compatibility
type UMLQuizServiceServer interface {
	AddUser(context.Context, *AddUserRequest) (*UserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UserResponse, error)
	FindUser(context.Context, *UserRequest) (*UserResponse, error)
	DeleteUser(context.Context, *UserRequest) (*ErrorResponse, error)
	AddQuiz(context.Context, *AddQuizRequest) (*QuizResponse, error)
	FindQuiz(context.Context, *FindQuizRequest) (*QuizResponse, error)
	UpdateQuiz(context.Context, *UpdateQuizRequest) (*QuizResponse, error)
	DeleteQuiz(context.Context, *DeleteQuizRequest) (*ErrorResponse, error)
	ListQuizzesAll(context.Context, *ListQuizzesAllRequest) (*QuizzesResponse, error)
	ListQuizzesByUser(context.Context, *ListQuizzesByUserRequest) (*QuizzesResponse, error)
	SolveQuiz(context.Context, *SolveQuizRequest) (*SolveResponse, error)
	LikeQuiz(context.Context, *LikeQuizRequest) (*ErrorResponse, error)
	AddReport(context.Context, *AddReportRequest) (*ReportResponse, error)
	FindReports(context.Context, *FindReportsRequest) (*ReportsResponse, error)
	UpdateReport(context.Context, *UpdateReportRequest) (*ReportResponse, error)
	DeleteReport(context.Context, *DeleteReportRequest) (*ErrorResponse, error)
}

// UnimplementedUMLQuizServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUMLQuizServiceServer struct {
}

func (UnimplementedUMLQuizServiceServer) AddUser(context.Context, *AddUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUMLQuizServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUMLQuizServiceServer) FindUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUser not implemented")
}
func (UnimplementedUMLQuizServiceServer) DeleteUser(context.Context, *UserRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUMLQuizServiceServer) AddQuiz(context.Context, *AddQuizRequest) (*QuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuiz not implemented")
}
func (UnimplementedUMLQuizServiceServer) FindQuiz(context.Context, *FindQuizRequest) (*QuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindQuiz not implemented")
}
func (UnimplementedUMLQuizServiceServer) UpdateQuiz(context.Context, *UpdateQuizRequest) (*QuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuiz not implemented")
}
func (UnimplementedUMLQuizServiceServer) DeleteQuiz(context.Context, *DeleteQuizRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuiz not implemented")
}
func (UnimplementedUMLQuizServiceServer) ListQuizzesAll(context.Context, *ListQuizzesAllRequest) (*QuizzesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuizzesAll not implemented")
}
func (UnimplementedUMLQuizServiceServer) ListQuizzesByUser(context.Context, *ListQuizzesByUserRequest) (*QuizzesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuizzesByUser not implemented")
}
func (UnimplementedUMLQuizServiceServer) SolveQuiz(context.Context, *SolveQuizRequest) (*SolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveQuiz not implemented")
}
func (UnimplementedUMLQuizServiceServer) LikeQuiz(context.Context, *LikeQuizRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeQuiz not implemented")
}
func (UnimplementedUMLQuizServiceServer) AddReport(context.Context, *AddReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReport not implemented")
}
func (UnimplementedUMLQuizServiceServer) FindReports(context.Context, *FindReportsRequest) (*ReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindReports not implemented")
}
func (UnimplementedUMLQuizServiceServer) UpdateReport(context.Context, *UpdateReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReport not implemented")
}
func (UnimplementedUMLQuizServiceServer) DeleteReport(context.Context, *DeleteReportRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReport not implemented")
}

// UnsafeUMLQuizServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UMLQuizServiceServer will
// result in compilation errors.
type UnsafeUMLQuizServiceServer interface {
	mustEmbedUnimplementedUMLQuizServiceServer()
}

func RegisterUMLQuizServiceServer(s grpc.ServiceRegistrar, srv UMLQuizServiceServer) {
	s.RegisterService(&UMLQuizService_ServiceDesc, srv)
}

func _UMLQuizService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/FindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).FindUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).DeleteUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_AddQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).AddQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/AddQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).AddQuiz(ctx, req.(*AddQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_FindQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).FindQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/FindQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).FindQuiz(ctx, req.(*FindQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_UpdateQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).UpdateQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/UpdateQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).UpdateQuiz(ctx, req.(*UpdateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_DeleteQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).DeleteQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/DeleteQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).DeleteQuiz(ctx, req.(*DeleteQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_ListQuizzesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuizzesAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).ListQuizzesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/ListQuizzesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).ListQuizzesAll(ctx, req.(*ListQuizzesAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_ListQuizzesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuizzesByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).ListQuizzesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/ListQuizzesByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).ListQuizzesByUser(ctx, req.(*ListQuizzesByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_SolveQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolveQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).SolveQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/SolveQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).SolveQuiz(ctx, req.(*SolveQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_LikeQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).LikeQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/LikeQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).LikeQuiz(ctx, req.(*LikeQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_AddReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).AddReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/AddReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).AddReport(ctx, req.(*AddReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_FindReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).FindReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/FindReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).FindReports(ctx, req.(*FindReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_UpdateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).UpdateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/UpdateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).UpdateReport(ctx, req.(*UpdateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UMLQuizService_DeleteReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UMLQuizServiceServer).DeleteReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umlquiz.UMLQuizService/DeleteReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UMLQuizServiceServer).DeleteReport(ctx, req.(*DeleteReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UMLQuizService_ServiceDesc is the grpc.ServiceDesc for UMLQuizService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UMLQuizService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umlquiz.UMLQuizService",
	HandlerType: (*UMLQuizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UMLQuizService_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UMLQuizService_UpdateUser_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _UMLQuizService_FindUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UMLQuizService_DeleteUser_Handler,
		},
		{
			MethodName: "AddQuiz",
			Handler:    _UMLQuizService_AddQuiz_Handler,
		},
		{
			MethodName: "FindQuiz",
			Handler:    _UMLQuizService_FindQuiz_Handler,
		},
		{
			MethodName: "UpdateQuiz",
			Handler:    _UMLQuizService_UpdateQuiz_Handler,
		},
		{
			MethodName: "DeleteQuiz",
			Handler:    _UMLQuizService_DeleteQuiz_Handler,
		},
		{
			MethodName: "ListQuizzesAll",
			Handler:    _UMLQuizService_ListQuizzesAll_Handler,
		},
		{
			MethodName: "ListQuizzesByUser",
			Handler:    _UMLQuizService_ListQuizzesByUser_Handler,
		},
		{
			MethodName: "SolveQuiz",
			Handler:    _UMLQuizService_SolveQuiz_Handler,
		},
		{
			MethodName: "LikeQuiz",
			Handler:    _UMLQuizService_LikeQuiz_Handler,
		},
		{
			MethodName: "AddReport",
			Handler:    _UMLQuizService_AddReport_Handler,
		},
		{
			MethodName: "FindReports",
			Handler:    _UMLQuizService_FindReports_Handler,
		},
		{
			MethodName: "UpdateReport",
			Handler:    _UMLQuizService_UpdateReport_Handler,
		},
		{
			MethodName: "DeleteReport",
			Handler:    _UMLQuizService_DeleteReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "umlquiz.proto",
}
