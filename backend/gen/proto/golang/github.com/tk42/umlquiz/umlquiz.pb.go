// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: umlquiz.proto

package umlquiz

import (
	datetime "google.golang.org/genproto/googleapis/type/datetime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DiagramType int32

const (
	DiagramType_UNSPECIFIED DiagramType = 0
	DiagramType_CLASS       DiagramType = 1
	DiagramType_SEQUENCE    DiagramType = 2
)

// Enum value maps for DiagramType.
var (
	DiagramType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CLASS",
		2: "SEQUENCE",
	}
	DiagramType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"CLASS":       1,
		"SEQUENCE":    2,
	}
)

func (x DiagramType) Enum() *DiagramType {
	p := new(DiagramType)
	*p = x
	return p
}

func (x DiagramType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagramType) Descriptor() protoreflect.EnumDescriptor {
	return file_umlquiz_proto_enumTypes[0].Descriptor()
}

func (DiagramType) Type() protoreflect.EnumType {
	return &file_umlquiz_proto_enumTypes[0]
}

func (x DiagramType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagramType.Descriptor instead.
func (DiagramType) EnumDescriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{0}
}

type MemgerShip int32

const (
	MemgerShip_BRONZE MemgerShip = 0
	MemgerShip_SILVER MemgerShip = 1
	MemgerShip_GOLD   MemgerShip = 2
)

// Enum value maps for MemgerShip.
var (
	MemgerShip_name = map[int32]string{
		0: "BRONZE",
		1: "SILVER",
		2: "GOLD",
	}
	MemgerShip_value = map[string]int32{
		"BRONZE": 0,
		"SILVER": 1,
		"GOLD":   2,
	}
)

func (x MemgerShip) Enum() *MemgerShip {
	p := new(MemgerShip)
	*p = x
	return p
}

func (x MemgerShip) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemgerShip) Descriptor() protoreflect.EnumDescriptor {
	return file_umlquiz_proto_enumTypes[1].Descriptor()
}

func (MemgerShip) Type() protoreflect.EnumType {
	return &file_umlquiz_proto_enumTypes[1]
}

func (x MemgerShip) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemgerShip.Descriptor instead.
func (MemgerShip) EnumDescriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{1}
}

type QuizStatus int32

const (
	QuizStatus_DRAFT  QuizStatus = 0
	QuizStatus_REVIEW QuizStatus = 1
	QuizStatus_PUBLIC QuizStatus = 2
	QuizStatus_REPORT QuizStatus = 3
)

// Enum value maps for QuizStatus.
var (
	QuizStatus_name = map[int32]string{
		0: "DRAFT",
		1: "REVIEW",
		2: "PUBLIC",
		3: "REPORT",
	}
	QuizStatus_value = map[string]int32{
		"DRAFT":  0,
		"REVIEW": 1,
		"PUBLIC": 2,
		"REPORT": 3,
	}
)

func (x QuizStatus) Enum() *QuizStatus {
	p := new(QuizStatus)
	*p = x
	return p
}

func (x QuizStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuizStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_umlquiz_proto_enumTypes[2].Descriptor()
}

func (QuizStatus) Type() protoreflect.EnumType {
	return &file_umlquiz_proto_enumTypes[2]
}

func (x QuizStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuizStatus.Descriptor instead.
func (QuizStatus) EnumDescriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{2}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username     string             `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password     string             `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Email        string             `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Profile      string             `protobuf:"bytes,5,opt,name=profile,proto3" json:"profile,omitempty"`
	Membership   MemgerShip         `protobuf:"varint,6,opt,name=membership,proto3,enum=umlquiz.MemgerShip" json:"membership,omitempty"`
	LikedQuizIds []string           `protobuf:"bytes,7,rep,name=liked_quiz_ids,json=likedQuizIds,proto3" json:"liked_quiz_ids,omitempty"`
	QuizHistory  []string           `protobuf:"bytes,8,rep,name=quiz_history,json=quizHistory,proto3" json:"quiz_history,omitempty"`
	CreatedAt    *datetime.DateTime `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    *datetime.DateTime `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *User) GetMembership() MemgerShip {
	if x != nil {
		return x.Membership
	}
	return MemgerShip_BRONZE
}

func (x *User) GetLikedQuizIds() []string {
	if x != nil {
		return x.LikedQuizIds
	}
	return nil
}

func (x *User) GetQuizHistory() []string {
	if x != nil {
		return x.QuizHistory
	}
	return nil
}

func (x *User) GetCreatedAt() *datetime.DateTime {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *datetime.DateTime {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Quiz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizId      string             `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Language    string             `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Status      QuizStatus         `protobuf:"varint,3,opt,name=status,proto3,enum=umlquiz.QuizStatus" json:"status,omitempty"`
	DiagramType DiagramType        `protobuf:"varint,4,opt,name=diagram_type,json=diagramType,proto3,enum=umlquiz.DiagramType" json:"diagram_type,omitempty"`
	Level       string             `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
	Title       string             `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Text        string             `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
	Diagram     string             `protobuf:"bytes,8,opt,name=diagram,proto3" json:"diagram,omitempty"`
	Likes       int32              `protobuf:"varint,9,opt,name=likes,proto3" json:"likes,omitempty"`
	AuthorId    string             `protobuf:"bytes,10,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	CreatedAt   *datetime.DateTime `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *datetime.DateTime `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Quiz) Reset() {
	*x = Quiz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quiz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quiz) ProtoMessage() {}

func (x *Quiz) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quiz.ProtoReflect.Descriptor instead.
func (*Quiz) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{1}
}

func (x *Quiz) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *Quiz) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Quiz) GetStatus() QuizStatus {
	if x != nil {
		return x.Status
	}
	return QuizStatus_DRAFT
}

func (x *Quiz) GetDiagramType() DiagramType {
	if x != nil {
		return x.DiagramType
	}
	return DiagramType_UNSPECIFIED
}

func (x *Quiz) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Quiz) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Quiz) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Quiz) GetDiagram() string {
	if x != nil {
		return x.Diagram
	}
	return ""
}

func (x *Quiz) GetLikes() int32 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *Quiz) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *Quiz) GetCreatedAt() *datetime.DateTime {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Quiz) GetUpdatedAt() *datetime.DateTime {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId  string             `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	QuizId    string             `protobuf:"bytes,2,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Language  string             `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	AuthorId  string             `protobuf:"bytes,4,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Title     string             `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Text      string             `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	Diagram   string             `protobuf:"bytes,7,opt,name=diagram,proto3" json:"diagram,omitempty"`
	Comment   string             `protobuf:"bytes,8,opt,name=comment,proto3" json:"comment,omitempty"`
	CreatedAt *datetime.DateTime `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{2}
}

func (x *Report) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *Report) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *Report) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Report) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *Report) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Report) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Report) GetDiagram() string {
	if x != nil {
		return x.Diagram
	}
	return ""
}

func (x *Report) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Report) GetCreatedAt() *datetime.DateTime {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type AddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *AddUserRequest) Reset() {
	*x = AddUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserRequest) ProtoMessage() {}

func (x *AddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserRequest.ProtoReflect.Descriptor instead.
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{3}
}

func (x *AddUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AddUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string     `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username   string     `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password   string     `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Email      string     `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Profile    string     `protobuf:"bytes,5,opt,name=profile,proto3" json:"profile,omitempty"`
	Membership MemgerShip `protobuf:"varint,6,opt,name=membership,proto3,enum=umlquiz.MemgerShip" json:"membership,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateUserRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *UpdateUserRequest) GetMembership() MemgerShip {
	if x != nil {
		return x.Membership
	}
	return MemgerShip_BRONZE
}

type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{5}
}

func (x *UserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AddQuizRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language    string      `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	DiagramType DiagramType `protobuf:"varint,2,opt,name=diagram_type,json=diagramType,proto3,enum=umlquiz.DiagramType" json:"diagram_type,omitempty"`
	Level       string      `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	Title       string      `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Text        string      `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	Diagram     string      `protobuf:"bytes,6,opt,name=diagram,proto3" json:"diagram,omitempty"`
	AuthorId    string      `protobuf:"bytes,7,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
}

func (x *AddQuizRequest) Reset() {
	*x = AddQuizRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQuizRequest) ProtoMessage() {}

func (x *AddQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQuizRequest.ProtoReflect.Descriptor instead.
func (*AddQuizRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{6}
}

func (x *AddQuizRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *AddQuizRequest) GetDiagramType() DiagramType {
	if x != nil {
		return x.DiagramType
	}
	return DiagramType_UNSPECIFIED
}

func (x *AddQuizRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *AddQuizRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddQuizRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AddQuizRequest) GetDiagram() string {
	if x != nil {
		return x.Diagram
	}
	return ""
}

func (x *AddQuizRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

type FindQuizRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizId   string `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *FindQuizRequest) Reset() {
	*x = FindQuizRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindQuizRequest) ProtoMessage() {}

func (x *FindQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindQuizRequest.ProtoReflect.Descriptor instead.
func (*FindQuizRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{7}
}

func (x *FindQuizRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *FindQuizRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type UpdateQuizRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizId      string      `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Language    string      `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Status      QuizStatus  `protobuf:"varint,3,opt,name=status,proto3,enum=umlquiz.QuizStatus" json:"status,omitempty"`
	DiagramType DiagramType `protobuf:"varint,4,opt,name=diagram_type,json=diagramType,proto3,enum=umlquiz.DiagramType" json:"diagram_type,omitempty"`
	Level       string      `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
	Title       string      `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Text        string      `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
	Diagram     string      `protobuf:"bytes,8,opt,name=diagram,proto3" json:"diagram,omitempty"`
	Likes       int32       `protobuf:"varint,9,opt,name=likes,proto3" json:"likes,omitempty"`
}

func (x *UpdateQuizRequest) Reset() {
	*x = UpdateQuizRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuizRequest) ProtoMessage() {}

func (x *UpdateQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuizRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuizRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateQuizRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *UpdateQuizRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UpdateQuizRequest) GetStatus() QuizStatus {
	if x != nil {
		return x.Status
	}
	return QuizStatus_DRAFT
}

func (x *UpdateQuizRequest) GetDiagramType() DiagramType {
	if x != nil {
		return x.DiagramType
	}
	return DiagramType_UNSPECIFIED
}

func (x *UpdateQuizRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *UpdateQuizRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateQuizRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *UpdateQuizRequest) GetDiagram() string {
	if x != nil {
		return x.Diagram
	}
	return ""
}

func (x *UpdateQuizRequest) GetLikes() int32 {
	if x != nil {
		return x.Likes
	}
	return 0
}

type DeleteQuizRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizId   string `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *DeleteQuizRequest) Reset() {
	*x = DeleteQuizRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuizRequest) ProtoMessage() {}

func (x *DeleteQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuizRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuizRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteQuizRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *DeleteQuizRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type ListQuizzesAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string     `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Status   QuizStatus `protobuf:"varint,2,opt,name=status,proto3,enum=umlquiz.QuizStatus" json:"status,omitempty"`
}

func (x *ListQuizzesAllRequest) Reset() {
	*x = ListQuizzesAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuizzesAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuizzesAllRequest) ProtoMessage() {}

func (x *ListQuizzesAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuizzesAllRequest.ProtoReflect.Descriptor instead.
func (*ListQuizzesAllRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{10}
}

func (x *ListQuizzesAllRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ListQuizzesAllRequest) GetStatus() QuizStatus {
	if x != nil {
		return x.Status
	}
	return QuizStatus_DRAFT
}

type ListQuizzesByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string     `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Language string     `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Status   QuizStatus `protobuf:"varint,3,opt,name=status,proto3,enum=umlquiz.QuizStatus" json:"status,omitempty"`
}

func (x *ListQuizzesByUserRequest) Reset() {
	*x = ListQuizzesByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuizzesByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuizzesByUserRequest) ProtoMessage() {}

func (x *ListQuizzesByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuizzesByUserRequest.ProtoReflect.Descriptor instead.
func (*ListQuizzesByUserRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{11}
}

func (x *ListQuizzesByUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListQuizzesByUserRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ListQuizzesByUserRequest) GetStatus() QuizStatus {
	if x != nil {
		return x.Status
	}
	return QuizStatus_DRAFT
}

type SolveQuizRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	QuizId   string `protobuf:"bytes,2,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Diagram  string `protobuf:"bytes,4,opt,name=diagram,proto3" json:"diagram,omitempty"`
}

func (x *SolveQuizRequest) Reset() {
	*x = SolveQuizRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolveQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolveQuizRequest) ProtoMessage() {}

func (x *SolveQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolveQuizRequest.ProtoReflect.Descriptor instead.
func (*SolveQuizRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{12}
}

func (x *SolveQuizRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SolveQuizRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *SolveQuizRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SolveQuizRequest) GetDiagram() string {
	if x != nil {
		return x.Diagram
	}
	return ""
}

type LikeQuizRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	QuizId   string `protobuf:"bytes,2,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	DiffLike int32  `protobuf:"varint,4,opt,name=diff_like,json=diffLike,proto3" json:"diff_like,omitempty"`
}

func (x *LikeQuizRequest) Reset() {
	*x = LikeQuizRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeQuizRequest) ProtoMessage() {}

func (x *LikeQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeQuizRequest.ProtoReflect.Descriptor instead.
func (*LikeQuizRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{13}
}

func (x *LikeQuizRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LikeQuizRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *LikeQuizRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *LikeQuizRequest) GetDiffLike() int32 {
	if x != nil {
		return x.DiffLike
	}
	return 0
}

type AddReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	QuizId   string `protobuf:"bytes,2,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Title    string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Text     string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	Diagram  string `protobuf:"bytes,6,opt,name=diagram,proto3" json:"diagram,omitempty"`
	Comment  string `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *AddReportRequest) Reset() {
	*x = AddReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReportRequest) ProtoMessage() {}

func (x *AddReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReportRequest.ProtoReflect.Descriptor instead.
func (*AddReportRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{14}
}

func (x *AddReportRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddReportRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *AddReportRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *AddReportRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddReportRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AddReportRequest) GetDiagram() string {
	if x != nil {
		return x.Diagram
	}
	return ""
}

func (x *AddReportRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type FindReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizId   string `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *FindReportsRequest) Reset() {
	*x = FindReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindReportsRequest) ProtoMessage() {}

func (x *FindReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindReportsRequest.ProtoReflect.Descriptor instead.
func (*FindReportsRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{15}
}

func (x *FindReportsRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *FindReportsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type UpdateReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Text     string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Diagram  string `protobuf:"bytes,4,opt,name=diagram,proto3" json:"diagram,omitempty"`
	Comment  string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *UpdateReportRequest) Reset() {
	*x = UpdateReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReportRequest) ProtoMessage() {}

func (x *UpdateReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReportRequest.ProtoReflect.Descriptor instead.
func (*UpdateReportRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *UpdateReportRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateReportRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *UpdateReportRequest) GetDiagram() string {
	if x != nil {
		return x.Diagram
	}
	return ""
}

func (x *UpdateReportRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type DeleteReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *DeleteReportRequest) Reset() {
	*x = DeleteReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReportRequest) ProtoMessage() {}

func (x *DeleteReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReportRequest.ProtoReflect.Descriptor instead.
func (*DeleteReportRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

type UserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UserResponse) Reset() {
	*x = UserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResponse) ProtoMessage() {}

func (x *UserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResponse.ProtoReflect.Descriptor instead.
func (*UserResponse) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{18}
}

func (x *UserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type QuizResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quiz  *Quiz  `protobuf:"bytes,1,opt,name=quiz,proto3" json:"quiz,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *QuizResponse) Reset() {
	*x = QuizResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizResponse) ProtoMessage() {}

func (x *QuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizResponse.ProtoReflect.Descriptor instead.
func (*QuizResponse) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{19}
}

func (x *QuizResponse) GetQuiz() *Quiz {
	if x != nil {
		return x.Quiz
	}
	return nil
}

func (x *QuizResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report *Report `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	Error  string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReportResponse) Reset() {
	*x = ReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResponse) ProtoMessage() {}

func (x *ReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResponse.ProtoReflect.Descriptor instead.
func (*ReportResponse) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{20}
}

func (x *ReportResponse) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *ReportResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type QuizzesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quiz  []*Quiz `protobuf:"bytes,1,rep,name=quiz,proto3" json:"quiz,omitempty"`
	Error string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *QuizzesResponse) Reset() {
	*x = QuizzesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizzesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizzesResponse) ProtoMessage() {}

func (x *QuizzesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizzesResponse.ProtoReflect.Descriptor instead.
func (*QuizzesResponse) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{21}
}

func (x *QuizzesResponse) GetQuiz() []*Quiz {
	if x != nil {
		return x.Quiz
	}
	return nil
}

func (x *QuizzesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report []*Report `protobuf:"bytes,1,rep,name=report,proto3" json:"report,omitempty"`
	Error  string    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReportsResponse) Reset() {
	*x = ReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportsResponse) ProtoMessage() {}

func (x *ReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportsResponse.ProtoReflect.Descriptor instead.
func (*ReportsResponse) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{22}
}

func (x *ReportsResponse) GetReport() []*Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *ReportsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SolveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diff  string `protobuf:"bytes,1,opt,name=diff,proto3" json:"diff,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SolveResponse) Reset() {
	*x = SolveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolveResponse) ProtoMessage() {}

func (x *SolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolveResponse.ProtoReflect.Descriptor instead.
func (*SolveResponse) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{23}
}

func (x *SolveResponse) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

func (x *SolveResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{24}
}

func (x *ErrorResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{25}
}

func (x *HelloRequest) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type HelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umlquiz_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_umlquiz_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_umlquiz_proto_rawDescGZIP(), []int{26}
}

func (x *HelloResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

var File_umlquiz_proto protoreflect.FileDescriptor

var file_umlquiz_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x33,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x4d, 0x65, 0x6d,
	0x67, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x69,
	0x7a, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6b,
	0x65, 0x64, 0x51, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x69,
	0x7a, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x71, 0x75, 0x69, 0x7a, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9a, 0x03, 0x0a, 0x04, 0x51, 0x75, 0x69,
	0x7a, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a,
	0x2e, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x75, 0x6d, 0x6c, 0x71,
	0x75, 0x69, 0x7a, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x34, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x5e, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x4d, 0x65, 0x6d, 0x67, 0x65, 0x72, 0x53,
	0x68, 0x69, 0x70, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22,
	0x26, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x51,
	0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x75,
	0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x51, 0x75,
	0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69,
	0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x9e,
	0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x6d, 0x6c, 0x71,
	0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x75,
	0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x22,
	0x48, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x60, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x51, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7c, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75,
	0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7a, 0x0a, 0x10, 0x53, 0x6f, 0x6c,
	0x76, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x7c, 0x0a, 0x0f, 0x4c, 0x69, 0x6b, 0x65, 0x51, 0x75, 0x69,
	0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6c,
	0x69, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x66, 0x66, 0x4c,
	0x69, 0x6b, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75,
	0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69,
	0x7a, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22,
	0x90, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x32, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x47, 0x0a, 0x0c, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x04, 0x71, 0x75,
	0x69, 0x7a, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4f, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6d, 0x6c,
	0x71, 0x75, 0x69, 0x7a, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x0f, 0x51, 0x75, 0x69,
	0x7a, 0x7a, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04,
	0x71, 0x75, 0x69, 0x7a, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x6d, 0x6c,
	0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75,
	0x69, 0x7a, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x39, 0x0a, 0x0d, 0x53, 0x6f, 0x6c, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x25, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x28, 0x0a, 0x0c, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2a, 0x37, 0x0a, 0x0b, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x2a, 0x2e, 0x0a, 0x0a, 0x4d, 0x65, 0x6d,
	0x67, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x4f, 0x4e, 0x5a,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x0a, 0x51, 0x75, 0x69,
	0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x32, 0x4f, 0x0a, 0x13, 0x55, 0x4d, 0x4c, 0x51, 0x75, 0x69,
	0x7a, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x15, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a,
	0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x8d, 0x02, 0x0a, 0x12, 0x55, 0x4d, 0x4c, 0x51,
	0x75, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x75, 0x6d, 0x6c, 0x71,
	0x75, 0x69, 0x7a, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x75, 0x6d, 0x6c, 0x71,
	0x75, 0x69, 0x7a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x75, 0x6d, 0x6c,
	0x71, 0x75, 0x69, 0x7a, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69,
	0x7a, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xbb, 0x04, 0x0a, 0x12, 0x55, 0x4d, 0x4c, 0x51,
	0x75, 0x69, 0x7a, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x17, 0x2e, 0x75, 0x6d, 0x6c, 0x71,
	0x75, 0x69, 0x7a, 0x2e, 0x41, 0x64, 0x64, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69,
	0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x46,
	0x69, 0x6e, 0x64, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x18, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69,
	0x7a, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69, 0x7a,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x1a, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75,
	0x69, 0x7a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51,
	0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x1a, 0x2e, 0x75, 0x6d,
	0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69,
	0x7a, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73,
	0x41, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75,
	0x69, 0x7a, 0x7a, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69,
	0x7a, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x51, 0x75, 0x69, 0x7a,
	0x12, 0x19, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x53, 0x6f, 0x6c, 0x76, 0x65,
	0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x75, 0x6d,
	0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x4c, 0x69, 0x6b, 0x65, 0x51, 0x75, 0x69,
	0x7a, 0x12, 0x18, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x4c, 0x69, 0x6b, 0x65,
	0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x75, 0x6d,
	0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb2, 0x02, 0x0a, 0x14, 0x55, 0x4d, 0x4c, 0x51, 0x75, 0x69,
	0x7a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x2e, 0x75, 0x6d,
	0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x1b, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x2e, 0x75, 0x6d, 0x6c, 0x71,
	0x75, 0x69, 0x7a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69,
	0x7a, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1c, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6b, 0x34, 0x32, 0x2f, 0x75, 0x6d,
	0x6c, 0x71, 0x75, 0x69, 0x7a, 0x3b, 0x75, 0x6d, 0x6c, 0x71, 0x75, 0x69, 0x7a, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_umlquiz_proto_rawDescOnce sync.Once
	file_umlquiz_proto_rawDescData = file_umlquiz_proto_rawDesc
)

func file_umlquiz_proto_rawDescGZIP() []byte {
	file_umlquiz_proto_rawDescOnce.Do(func() {
		file_umlquiz_proto_rawDescData = protoimpl.X.CompressGZIP(file_umlquiz_proto_rawDescData)
	})
	return file_umlquiz_proto_rawDescData
}

var file_umlquiz_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_umlquiz_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_umlquiz_proto_goTypes = []interface{}{
	(DiagramType)(0),                 // 0: umlquiz.DiagramType
	(MemgerShip)(0),                  // 1: umlquiz.MemgerShip
	(QuizStatus)(0),                  // 2: umlquiz.QuizStatus
	(*User)(nil),                     // 3: umlquiz.User
	(*Quiz)(nil),                     // 4: umlquiz.Quiz
	(*Report)(nil),                   // 5: umlquiz.Report
	(*AddUserRequest)(nil),           // 6: umlquiz.AddUserRequest
	(*UpdateUserRequest)(nil),        // 7: umlquiz.UpdateUserRequest
	(*UserRequest)(nil),              // 8: umlquiz.UserRequest
	(*AddQuizRequest)(nil),           // 9: umlquiz.AddQuizRequest
	(*FindQuizRequest)(nil),          // 10: umlquiz.FindQuizRequest
	(*UpdateQuizRequest)(nil),        // 11: umlquiz.UpdateQuizRequest
	(*DeleteQuizRequest)(nil),        // 12: umlquiz.DeleteQuizRequest
	(*ListQuizzesAllRequest)(nil),    // 13: umlquiz.ListQuizzesAllRequest
	(*ListQuizzesByUserRequest)(nil), // 14: umlquiz.ListQuizzesByUserRequest
	(*SolveQuizRequest)(nil),         // 15: umlquiz.SolveQuizRequest
	(*LikeQuizRequest)(nil),          // 16: umlquiz.LikeQuizRequest
	(*AddReportRequest)(nil),         // 17: umlquiz.AddReportRequest
	(*FindReportsRequest)(nil),       // 18: umlquiz.FindReportsRequest
	(*UpdateReportRequest)(nil),      // 19: umlquiz.UpdateReportRequest
	(*DeleteReportRequest)(nil),      // 20: umlquiz.DeleteReportRequest
	(*UserResponse)(nil),             // 21: umlquiz.UserResponse
	(*QuizResponse)(nil),             // 22: umlquiz.QuizResponse
	(*ReportResponse)(nil),           // 23: umlquiz.ReportResponse
	(*QuizzesResponse)(nil),          // 24: umlquiz.QuizzesResponse
	(*ReportsResponse)(nil),          // 25: umlquiz.ReportsResponse
	(*SolveResponse)(nil),            // 26: umlquiz.SolveResponse
	(*ErrorResponse)(nil),            // 27: umlquiz.ErrorResponse
	(*HelloRequest)(nil),             // 28: umlquiz.HelloRequest
	(*HelloResponse)(nil),            // 29: umlquiz.HelloResponse
	(*datetime.DateTime)(nil),        // 30: google.type.DateTime
}
var file_umlquiz_proto_depIdxs = []int32{
	1,  // 0: umlquiz.User.membership:type_name -> umlquiz.MemgerShip
	30, // 1: umlquiz.User.created_at:type_name -> google.type.DateTime
	30, // 2: umlquiz.User.updated_at:type_name -> google.type.DateTime
	2,  // 3: umlquiz.Quiz.status:type_name -> umlquiz.QuizStatus
	0,  // 4: umlquiz.Quiz.diagram_type:type_name -> umlquiz.DiagramType
	30, // 5: umlquiz.Quiz.created_at:type_name -> google.type.DateTime
	30, // 6: umlquiz.Quiz.updated_at:type_name -> google.type.DateTime
	30, // 7: umlquiz.Report.created_at:type_name -> google.type.DateTime
	1,  // 8: umlquiz.UpdateUserRequest.membership:type_name -> umlquiz.MemgerShip
	0,  // 9: umlquiz.AddQuizRequest.diagram_type:type_name -> umlquiz.DiagramType
	2,  // 10: umlquiz.UpdateQuizRequest.status:type_name -> umlquiz.QuizStatus
	0,  // 11: umlquiz.UpdateQuizRequest.diagram_type:type_name -> umlquiz.DiagramType
	2,  // 12: umlquiz.ListQuizzesAllRequest.status:type_name -> umlquiz.QuizStatus
	2,  // 13: umlquiz.ListQuizzesByUserRequest.status:type_name -> umlquiz.QuizStatus
	3,  // 14: umlquiz.UserResponse.user:type_name -> umlquiz.User
	4,  // 15: umlquiz.QuizResponse.quiz:type_name -> umlquiz.Quiz
	5,  // 16: umlquiz.ReportResponse.report:type_name -> umlquiz.Report
	4,  // 17: umlquiz.QuizzesResponse.quiz:type_name -> umlquiz.Quiz
	5,  // 18: umlquiz.ReportsResponse.report:type_name -> umlquiz.Report
	28, // 19: umlquiz.UMLQuizHelloService.Hello:input_type -> umlquiz.HelloRequest
	6,  // 20: umlquiz.UMLQuizUserService.AddUser:input_type -> umlquiz.AddUserRequest
	7,  // 21: umlquiz.UMLQuizUserService.UpdateUser:input_type -> umlquiz.UpdateUserRequest
	8,  // 22: umlquiz.UMLQuizUserService.FindUser:input_type -> umlquiz.UserRequest
	8,  // 23: umlquiz.UMLQuizUserService.DeleteUser:input_type -> umlquiz.UserRequest
	9,  // 24: umlquiz.UMLQuizQuizService.AddQuiz:input_type -> umlquiz.AddQuizRequest
	10, // 25: umlquiz.UMLQuizQuizService.FindQuiz:input_type -> umlquiz.FindQuizRequest
	11, // 26: umlquiz.UMLQuizQuizService.UpdateQuiz:input_type -> umlquiz.UpdateQuizRequest
	12, // 27: umlquiz.UMLQuizQuizService.DeleteQuiz:input_type -> umlquiz.DeleteQuizRequest
	13, // 28: umlquiz.UMLQuizQuizService.ListQuizzesAll:input_type -> umlquiz.ListQuizzesAllRequest
	14, // 29: umlquiz.UMLQuizQuizService.ListQuizzesByUser:input_type -> umlquiz.ListQuizzesByUserRequest
	15, // 30: umlquiz.UMLQuizQuizService.SolveQuiz:input_type -> umlquiz.SolveQuizRequest
	16, // 31: umlquiz.UMLQuizQuizService.LikeQuiz:input_type -> umlquiz.LikeQuizRequest
	17, // 32: umlquiz.UMLQuizReportService.AddReport:input_type -> umlquiz.AddReportRequest
	18, // 33: umlquiz.UMLQuizReportService.FindReports:input_type -> umlquiz.FindReportsRequest
	19, // 34: umlquiz.UMLQuizReportService.UpdateReport:input_type -> umlquiz.UpdateReportRequest
	20, // 35: umlquiz.UMLQuizReportService.DeleteReport:input_type -> umlquiz.DeleteReportRequest
	29, // 36: umlquiz.UMLQuizHelloService.Hello:output_type -> umlquiz.HelloResponse
	21, // 37: umlquiz.UMLQuizUserService.AddUser:output_type -> umlquiz.UserResponse
	21, // 38: umlquiz.UMLQuizUserService.UpdateUser:output_type -> umlquiz.UserResponse
	21, // 39: umlquiz.UMLQuizUserService.FindUser:output_type -> umlquiz.UserResponse
	27, // 40: umlquiz.UMLQuizUserService.DeleteUser:output_type -> umlquiz.ErrorResponse
	22, // 41: umlquiz.UMLQuizQuizService.AddQuiz:output_type -> umlquiz.QuizResponse
	22, // 42: umlquiz.UMLQuizQuizService.FindQuiz:output_type -> umlquiz.QuizResponse
	22, // 43: umlquiz.UMLQuizQuizService.UpdateQuiz:output_type -> umlquiz.QuizResponse
	27, // 44: umlquiz.UMLQuizQuizService.DeleteQuiz:output_type -> umlquiz.ErrorResponse
	24, // 45: umlquiz.UMLQuizQuizService.ListQuizzesAll:output_type -> umlquiz.QuizzesResponse
	24, // 46: umlquiz.UMLQuizQuizService.ListQuizzesByUser:output_type -> umlquiz.QuizzesResponse
	26, // 47: umlquiz.UMLQuizQuizService.SolveQuiz:output_type -> umlquiz.SolveResponse
	27, // 48: umlquiz.UMLQuizQuizService.LikeQuiz:output_type -> umlquiz.ErrorResponse
	23, // 49: umlquiz.UMLQuizReportService.AddReport:output_type -> umlquiz.ReportResponse
	25, // 50: umlquiz.UMLQuizReportService.FindReports:output_type -> umlquiz.ReportsResponse
	23, // 51: umlquiz.UMLQuizReportService.UpdateReport:output_type -> umlquiz.ReportResponse
	27, // 52: umlquiz.UMLQuizReportService.DeleteReport:output_type -> umlquiz.ErrorResponse
	36, // [36:53] is the sub-list for method output_type
	19, // [19:36] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_umlquiz_proto_init() }
func file_umlquiz_proto_init() {
	if File_umlquiz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_umlquiz_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quiz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddQuizRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindQuizRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuizRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQuizRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuizzesAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuizzesByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolveQuizRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeQuizRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizzesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umlquiz_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_umlquiz_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_umlquiz_proto_goTypes,
		DependencyIndexes: file_umlquiz_proto_depIdxs,
		EnumInfos:         file_umlquiz_proto_enumTypes,
		MessageInfos:      file_umlquiz_proto_msgTypes,
	}.Build()
	File_umlquiz_proto = out.File
	file_umlquiz_proto_rawDesc = nil
	file_umlquiz_proto_goTypes = nil
	file_umlquiz_proto_depIdxs = nil
}
