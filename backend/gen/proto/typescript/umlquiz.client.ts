// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "umlquiz.proto" (package "umlquiz", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UMLQuizService } from "./umlquiz";
import type { DeleteReportRequest } from "./umlquiz";
import type { UpdateReportRequest } from "./umlquiz";
import type { ReportsResponse } from "./umlquiz";
import type { FindReportsRequest } from "./umlquiz";
import type { ReportResponse } from "./umlquiz";
import type { AddReportRequest } from "./umlquiz";
import type { LikeQuizRequest } from "./umlquiz";
import type { SolveResponse } from "./umlquiz";
import type { SolveQuizRequest } from "./umlquiz";
import type { ListQuizzesByUserRequest } from "./umlquiz";
import type { QuizzesResponse } from "./umlquiz";
import type { ListQuizzesAllRequest } from "./umlquiz";
import type { DeleteQuizRequest } from "./umlquiz";
import type { UpdateQuizRequest } from "./umlquiz";
import type { FindQuizRequest } from "./umlquiz";
import type { QuizResponse } from "./umlquiz";
import type { AddQuizRequest } from "./umlquiz";
import type { ErrorResponse } from "./umlquiz";
import type { UserRequest } from "./umlquiz";
import type { UpdateUserRequest } from "./umlquiz";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UserResponse } from "./umlquiz";
import type { AddUserRequest } from "./umlquiz";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service umlquiz.UMLQuizService
 */
export interface IUMLQuizServiceClient {
    /**
     * @generated from protobuf rpc: AddUser(umlquiz.AddUserRequest) returns (umlquiz.UserResponse);
     */
    addUser(input: AddUserRequest, options?: RpcOptions): UnaryCall<AddUserRequest, UserResponse>;
    /**
     * @generated from protobuf rpc: UpdateUser(umlquiz.UpdateUserRequest) returns (umlquiz.UserResponse);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UserResponse>;
    /**
     * @generated from protobuf rpc: FindUser(umlquiz.UserRequest) returns (umlquiz.UserResponse);
     */
    findUser(input: UserRequest, options?: RpcOptions): UnaryCall<UserRequest, UserResponse>;
    /**
     * @generated from protobuf rpc: DeleteUser(umlquiz.UserRequest) returns (umlquiz.ErrorResponse);
     */
    deleteUser(input: UserRequest, options?: RpcOptions): UnaryCall<UserRequest, ErrorResponse>;
    /**
     * @generated from protobuf rpc: AddQuiz(umlquiz.AddQuizRequest) returns (umlquiz.QuizResponse);
     */
    addQuiz(input: AddQuizRequest, options?: RpcOptions): UnaryCall<AddQuizRequest, QuizResponse>;
    /**
     * @generated from protobuf rpc: FindQuiz(umlquiz.FindQuizRequest) returns (umlquiz.QuizResponse);
     */
    findQuiz(input: FindQuizRequest, options?: RpcOptions): UnaryCall<FindQuizRequest, QuizResponse>;
    /**
     * @generated from protobuf rpc: UpdateQuiz(umlquiz.UpdateQuizRequest) returns (umlquiz.QuizResponse);
     */
    updateQuiz(input: UpdateQuizRequest, options?: RpcOptions): UnaryCall<UpdateQuizRequest, QuizResponse>;
    /**
     * @generated from protobuf rpc: DeleteQuiz(umlquiz.DeleteQuizRequest) returns (umlquiz.ErrorResponse);
     */
    deleteQuiz(input: DeleteQuizRequest, options?: RpcOptions): UnaryCall<DeleteQuizRequest, ErrorResponse>;
    /**
     * @generated from protobuf rpc: ListQuizzesAll(umlquiz.ListQuizzesAllRequest) returns (umlquiz.QuizzesResponse);
     */
    listQuizzesAll(input: ListQuizzesAllRequest, options?: RpcOptions): UnaryCall<ListQuizzesAllRequest, QuizzesResponse>;
    /**
     * @generated from protobuf rpc: ListQuizzesByUser(umlquiz.ListQuizzesByUserRequest) returns (umlquiz.QuizzesResponse);
     */
    listQuizzesByUser(input: ListQuizzesByUserRequest, options?: RpcOptions): UnaryCall<ListQuizzesByUserRequest, QuizzesResponse>;
    /**
     * @generated from protobuf rpc: SolveQuiz(umlquiz.SolveQuizRequest) returns (umlquiz.SolveResponse);
     */
    solveQuiz(input: SolveQuizRequest, options?: RpcOptions): UnaryCall<SolveQuizRequest, SolveResponse>;
    /**
     * @generated from protobuf rpc: LikeQuiz(umlquiz.LikeQuizRequest) returns (umlquiz.ErrorResponse);
     */
    likeQuiz(input: LikeQuizRequest, options?: RpcOptions): UnaryCall<LikeQuizRequest, ErrorResponse>;
    /**
     * @generated from protobuf rpc: AddReport(umlquiz.AddReportRequest) returns (umlquiz.ReportResponse);
     */
    addReport(input: AddReportRequest, options?: RpcOptions): UnaryCall<AddReportRequest, ReportResponse>;
    /**
     * @generated from protobuf rpc: FindReports(umlquiz.FindReportsRequest) returns (umlquiz.ReportsResponse);
     */
    findReports(input: FindReportsRequest, options?: RpcOptions): UnaryCall<FindReportsRequest, ReportsResponse>;
    /**
     * @generated from protobuf rpc: UpdateReport(umlquiz.UpdateReportRequest) returns (umlquiz.ReportResponse);
     */
    updateReport(input: UpdateReportRequest, options?: RpcOptions): UnaryCall<UpdateReportRequest, ReportResponse>;
    /**
     * @generated from protobuf rpc: DeleteReport(umlquiz.DeleteReportRequest) returns (umlquiz.ErrorResponse);
     */
    deleteReport(input: DeleteReportRequest, options?: RpcOptions): UnaryCall<DeleteReportRequest, ErrorResponse>;
}
/**
 * @generated from protobuf service umlquiz.UMLQuizService
 */
export class UMLQuizServiceClient implements IUMLQuizServiceClient, ServiceInfo {
    typeName = UMLQuizService.typeName;
    methods = UMLQuizService.methods;
    options = UMLQuizService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: AddUser(umlquiz.AddUserRequest) returns (umlquiz.UserResponse);
     */
    addUser(input: AddUserRequest, options?: RpcOptions): UnaryCall<AddUserRequest, UserResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddUserRequest, UserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUser(umlquiz.UpdateUserRequest) returns (umlquiz.UserResponse);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UserResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserRequest, UserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FindUser(umlquiz.UserRequest) returns (umlquiz.UserResponse);
     */
    findUser(input: UserRequest, options?: RpcOptions): UnaryCall<UserRequest, UserResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserRequest, UserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteUser(umlquiz.UserRequest) returns (umlquiz.ErrorResponse);
     */
    deleteUser(input: UserRequest, options?: RpcOptions): UnaryCall<UserRequest, ErrorResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserRequest, ErrorResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddQuiz(umlquiz.AddQuizRequest) returns (umlquiz.QuizResponse);
     */
    addQuiz(input: AddQuizRequest, options?: RpcOptions): UnaryCall<AddQuizRequest, QuizResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddQuizRequest, QuizResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FindQuiz(umlquiz.FindQuizRequest) returns (umlquiz.QuizResponse);
     */
    findQuiz(input: FindQuizRequest, options?: RpcOptions): UnaryCall<FindQuizRequest, QuizResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<FindQuizRequest, QuizResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateQuiz(umlquiz.UpdateQuizRequest) returns (umlquiz.QuizResponse);
     */
    updateQuiz(input: UpdateQuizRequest, options?: RpcOptions): UnaryCall<UpdateQuizRequest, QuizResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateQuizRequest, QuizResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteQuiz(umlquiz.DeleteQuizRequest) returns (umlquiz.ErrorResponse);
     */
    deleteQuiz(input: DeleteQuizRequest, options?: RpcOptions): UnaryCall<DeleteQuizRequest, ErrorResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteQuizRequest, ErrorResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListQuizzesAll(umlquiz.ListQuizzesAllRequest) returns (umlquiz.QuizzesResponse);
     */
    listQuizzesAll(input: ListQuizzesAllRequest, options?: RpcOptions): UnaryCall<ListQuizzesAllRequest, QuizzesResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListQuizzesAllRequest, QuizzesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListQuizzesByUser(umlquiz.ListQuizzesByUserRequest) returns (umlquiz.QuizzesResponse);
     */
    listQuizzesByUser(input: ListQuizzesByUserRequest, options?: RpcOptions): UnaryCall<ListQuizzesByUserRequest, QuizzesResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListQuizzesByUserRequest, QuizzesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SolveQuiz(umlquiz.SolveQuizRequest) returns (umlquiz.SolveResponse);
     */
    solveQuiz(input: SolveQuizRequest, options?: RpcOptions): UnaryCall<SolveQuizRequest, SolveResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<SolveQuizRequest, SolveResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: LikeQuiz(umlquiz.LikeQuizRequest) returns (umlquiz.ErrorResponse);
     */
    likeQuiz(input: LikeQuizRequest, options?: RpcOptions): UnaryCall<LikeQuizRequest, ErrorResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<LikeQuizRequest, ErrorResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddReport(umlquiz.AddReportRequest) returns (umlquiz.ReportResponse);
     */
    addReport(input: AddReportRequest, options?: RpcOptions): UnaryCall<AddReportRequest, ReportResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddReportRequest, ReportResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FindReports(umlquiz.FindReportsRequest) returns (umlquiz.ReportsResponse);
     */
    findReports(input: FindReportsRequest, options?: RpcOptions): UnaryCall<FindReportsRequest, ReportsResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<FindReportsRequest, ReportsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateReport(umlquiz.UpdateReportRequest) returns (umlquiz.ReportResponse);
     */
    updateReport(input: UpdateReportRequest, options?: RpcOptions): UnaryCall<UpdateReportRequest, ReportResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateReportRequest, ReportResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteReport(umlquiz.DeleteReportRequest) returns (umlquiz.ErrorResponse);
     */
    deleteReport(input: DeleteReportRequest, options?: RpcOptions): UnaryCall<DeleteReportRequest, ErrorResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteReportRequest, ErrorResponse>("unary", this._transport, method, opt, input);
    }
}
