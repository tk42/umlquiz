// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "umlquiz.proto" (package "umlquiz", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DateTime } from "./google/type/datetime";
/**
 * @generated from protobuf message umlquiz.User
 */
export interface User {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 3;
     */
    password: string;
    /**
     * @generated from protobuf field: string email = 4;
     */
    email: string;
    /**
     * @generated from protobuf field: string profile = 5;
     */
    profile: string;
    /**
     * @generated from protobuf field: umlquiz.MemgerShip membership = 6;
     */
    membership: MemgerShip;
    /**
     * @generated from protobuf field: repeated string liked_quiz_ids = 7;
     */
    likedQuizIds: string[];
    /**
     * @generated from protobuf field: repeated string quiz_history = 8;
     */
    quizHistory: string[];
    /**
     * @generated from protobuf field: google.type.DateTime created_at = 9;
     */
    createdAt?: DateTime;
    /**
     * @generated from protobuf field: google.type.DateTime updated_at = 10;
     */
    updatedAt?: DateTime;
}
/**
 * @generated from protobuf message umlquiz.Quiz
 */
export interface Quiz {
    /**
     * @generated from protobuf field: string quiz_id = 1;
     */
    quizId: string;
    /**
     * @generated from protobuf field: string language = 2;
     */
    language: string;
    /**
     * @generated from protobuf field: umlquiz.QuizStatus status = 3;
     */
    status: QuizStatus;
    /**
     * @generated from protobuf field: umlquiz.DiagramType diagram_type = 4;
     */
    diagramType: DiagramType;
    /**
     * @generated from protobuf field: string level = 5;
     */
    level: string;
    /**
     * @generated from protobuf field: string title = 6;
     */
    title: string;
    /**
     * @generated from protobuf field: string text = 7;
     */
    text: string;
    /**
     * @generated from protobuf field: string diagram = 8;
     */
    diagram: string;
    /**
     * @generated from protobuf field: int32 likes = 9;
     */
    likes: number;
    /**
     * @generated from protobuf field: string author_id = 10;
     */
    authorId: string;
    /**
     * @generated from protobuf field: google.type.DateTime created_at = 11;
     */
    createdAt?: DateTime;
    /**
     * @generated from protobuf field: google.type.DateTime updated_at = 12;
     */
    updatedAt?: DateTime;
}
/**
 * @generated from protobuf message umlquiz.Report
 */
export interface Report {
    /**
     * @generated from protobuf field: string report_id = 1;
     */
    reportId: string;
    /**
     * @generated from protobuf field: string quiz_id = 2;
     */
    quizId: string;
    /**
     * @generated from protobuf field: string language = 3;
     */
    language: string;
    /**
     * @generated from protobuf field: string author_id = 4;
     */
    authorId: string;
    /**
     * @generated from protobuf field: string title = 5;
     */
    title: string;
    /**
     * @generated from protobuf field: string text = 6;
     */
    text: string;
    /**
     * @generated from protobuf field: string diagram = 7;
     */
    diagram: string;
    /**
     * @generated from protobuf field: string comment = 8;
     */
    comment: string;
    /**
     * @generated from protobuf field: google.type.DateTime created_at = 9;
     */
    createdAt?: DateTime;
}
/**
 * @generated from protobuf message umlquiz.AddUserRequest
 */
export interface AddUserRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
}
/**
 * @generated from protobuf message umlquiz.UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 3;
     */
    password: string;
    /**
     * @generated from protobuf field: string email = 4;
     */
    email: string;
    /**
     * @generated from protobuf field: string profile = 5;
     */
    profile: string;
    /**
     * @generated from protobuf field: umlquiz.MemgerShip membership = 6;
     */
    membership: MemgerShip;
}
/**
 * @generated from protobuf message umlquiz.UserRequest
 */
export interface UserRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message umlquiz.AddQuizRequest
 */
export interface AddQuizRequest {
    /**
     * @generated from protobuf field: string language = 1;
     */
    language: string;
    /**
     * @generated from protobuf field: umlquiz.DiagramType diagram_type = 2;
     */
    diagramType: DiagramType;
    /**
     * @generated from protobuf field: string level = 3;
     */
    level: string;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: string text = 5;
     */
    text: string;
    /**
     * @generated from protobuf field: string diagram = 6;
     */
    diagram: string;
    /**
     * @generated from protobuf field: string author_id = 7;
     */
    authorId: string;
}
/**
 * @generated from protobuf message umlquiz.FindQuizRequest
 */
export interface FindQuizRequest {
    /**
     * @generated from protobuf field: string quiz_id = 1;
     */
    quizId: string;
    /**
     * @generated from protobuf field: string language = 2;
     */
    language: string;
}
/**
 * @generated from protobuf message umlquiz.UpdateQuizRequest
 */
export interface UpdateQuizRequest {
    /**
     * @generated from protobuf field: string quiz_id = 1;
     */
    quizId: string;
    /**
     * @generated from protobuf field: string language = 2;
     */
    language: string;
    /**
     * @generated from protobuf field: umlquiz.QuizStatus status = 3;
     */
    status: QuizStatus;
    /**
     * @generated from protobuf field: umlquiz.DiagramType diagram_type = 4;
     */
    diagramType: DiagramType;
    /**
     * @generated from protobuf field: string level = 5;
     */
    level: string;
    /**
     * @generated from protobuf field: string title = 6;
     */
    title: string;
    /**
     * @generated from protobuf field: string text = 7;
     */
    text: string;
    /**
     * @generated from protobuf field: string diagram = 8;
     */
    diagram: string;
    /**
     * @generated from protobuf field: int32 likes = 9;
     */
    likes: number;
}
/**
 * @generated from protobuf message umlquiz.DeleteQuizRequest
 */
export interface DeleteQuizRequest {
    /**
     * @generated from protobuf field: string quiz_id = 1;
     */
    quizId: string;
    /**
     * @generated from protobuf field: string language = 2;
     */
    language: string;
}
/**
 * @generated from protobuf message umlquiz.ListQuizzesAllRequest
 */
export interface ListQuizzesAllRequest {
    /**
     * @generated from protobuf field: string language = 1;
     */
    language: string;
    /**
     * @generated from protobuf field: umlquiz.QuizStatus status = 2;
     */
    status: QuizStatus;
}
/**
 * @generated from protobuf message umlquiz.ListQuizzesByUserRequest
 */
export interface ListQuizzesByUserRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string language = 2;
     */
    language: string;
    /**
     * @generated from protobuf field: umlquiz.QuizStatus status = 3;
     */
    status: QuizStatus;
}
/**
 * @generated from protobuf message umlquiz.SolveQuizRequest
 */
export interface SolveQuizRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string quiz_id = 2;
     */
    quizId: string;
    /**
     * @generated from protobuf field: string language = 3;
     */
    language: string;
    /**
     * @generated from protobuf field: string diagram = 4;
     */
    diagram: string;
}
/**
 * @generated from protobuf message umlquiz.LikeQuizRequest
 */
export interface LikeQuizRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string quiz_id = 2;
     */
    quizId: string;
    /**
     * @generated from protobuf field: string language = 3;
     */
    language: string;
    /**
     * @generated from protobuf field: int32 diff_like = 4;
     */
    diffLike: number;
}
/**
 * @generated from protobuf message umlquiz.AddReportRequest
 */
export interface AddReportRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string quiz_id = 2;
     */
    quizId: string;
    /**
     * @generated from protobuf field: string language = 3;
     */
    language: string;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: string text = 5;
     */
    text: string;
    /**
     * @generated from protobuf field: string diagram = 6;
     */
    diagram: string;
    /**
     * @generated from protobuf field: string comment = 7;
     */
    comment: string;
}
/**
 * @generated from protobuf message umlquiz.FindReportsRequest
 */
export interface FindReportsRequest {
    /**
     * @generated from protobuf field: string quiz_id = 1;
     */
    quizId: string;
    /**
     * @generated from protobuf field: string language = 2;
     */
    language: string;
}
/**
 * @generated from protobuf message umlquiz.UpdateReportRequest
 */
export interface UpdateReportRequest {
    /**
     * @generated from protobuf field: string report_id = 1;
     */
    reportId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
    /**
     * @generated from protobuf field: string diagram = 4;
     */
    diagram: string;
    /**
     * @generated from protobuf field: string comment = 5;
     */
    comment: string;
}
/**
 * @generated from protobuf message umlquiz.DeleteReportRequest
 */
export interface DeleteReportRequest {
    /**
     * @generated from protobuf field: string report_id = 1;
     */
    reportId: string;
}
/**
 * @generated from protobuf message umlquiz.UserResponse
 */
export interface UserResponse {
    /**
     * @generated from protobuf field: umlquiz.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: string error = 2;
     */
    error: string;
}
/**
 * @generated from protobuf message umlquiz.QuizResponse
 */
export interface QuizResponse {
    /**
     * @generated from protobuf field: umlquiz.Quiz quiz = 1;
     */
    quiz?: Quiz;
    /**
     * @generated from protobuf field: string error = 2;
     */
    error: string;
}
/**
 * @generated from protobuf message umlquiz.ReportResponse
 */
export interface ReportResponse {
    /**
     * @generated from protobuf field: umlquiz.Report report = 1;
     */
    report?: Report;
    /**
     * @generated from protobuf field: string error = 2;
     */
    error: string;
}
/**
 * @generated from protobuf message umlquiz.QuizzesResponse
 */
export interface QuizzesResponse {
    /**
     * @generated from protobuf field: repeated umlquiz.Quiz quiz = 1;
     */
    quiz: Quiz[];
    /**
     * @generated from protobuf field: string error = 2;
     */
    error: string;
}
/**
 * @generated from protobuf message umlquiz.ReportsResponse
 */
export interface ReportsResponse {
    /**
     * @generated from protobuf field: repeated umlquiz.Report report = 1;
     */
    report: Report[];
    /**
     * @generated from protobuf field: string error = 2;
     */
    error: string;
}
/**
 * @generated from protobuf message umlquiz.SolveResponse
 */
export interface SolveResponse {
    /**
     * @generated from protobuf field: string diff = 1;
     */
    diff: string;
    /**
     * @generated from protobuf field: string error = 2;
     */
    error: string;
}
/**
 * @generated from protobuf message umlquiz.ErrorResponse
 */
export interface ErrorResponse {
    /**
     * @generated from protobuf field: string error = 1;
     */
    error: string;
}
/**
 * @generated from protobuf enum umlquiz.DiagramType
 */
export enum DiagramType {
    /**
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: CLASS = 1;
     */
    CLASS = 1,
    /**
     * @generated from protobuf enum value: SEQUENCE = 2;
     */
    SEQUENCE = 2
}
/**
 * @generated from protobuf enum umlquiz.MemgerShip
 */
export enum MemgerShip {
    /**
     * @generated from protobuf enum value: BRONZE = 0;
     */
    BRONZE = 0,
    /**
     * @generated from protobuf enum value: SILVER = 1;
     */
    SILVER = 1,
    /**
     * @generated from protobuf enum value: GOLD = 2;
     */
    GOLD = 2
}
/**
 * @generated from protobuf enum umlquiz.QuizStatus
 */
export enum QuizStatus {
    /**
     * @generated from protobuf enum value: DRAFT = 0;
     */
    DRAFT = 0,
    /**
     * @generated from protobuf enum value: REVIEW = 1;
     */
    REVIEW = 1,
    /**
     * @generated from protobuf enum value: PUBLIC = 2;
     */
    PUBLIC = 2,
    /**
     * @generated from protobuf enum value: REPORT = 3;
     */
    REPORT = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("umlquiz.User", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "profile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "membership", kind: "enum", T: () => ["umlquiz.MemgerShip", MemgerShip] },
            { no: 7, name: "liked_quiz_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "quiz_history", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "created_at", kind: "message", T: () => DateTime },
            { no: 10, name: "updated_at", kind: "message", T: () => DateTime }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = { userId: "", username: "", password: "", email: "", profile: "", membership: 0, likedQuizIds: [], quizHistory: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* string password */ 3:
                    message.password = reader.string();
                    break;
                case /* string email */ 4:
                    message.email = reader.string();
                    break;
                case /* string profile */ 5:
                    message.profile = reader.string();
                    break;
                case /* umlquiz.MemgerShip membership */ 6:
                    message.membership = reader.int32();
                    break;
                case /* repeated string liked_quiz_ids */ 7:
                    message.likedQuizIds.push(reader.string());
                    break;
                case /* repeated string quiz_history */ 8:
                    message.quizHistory.push(reader.string());
                    break;
                case /* google.type.DateTime created_at */ 9:
                    message.createdAt = DateTime.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.type.DateTime updated_at */ 10:
                    message.updatedAt = DateTime.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* string password = 3; */
        if (message.password !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.password);
        /* string email = 4; */
        if (message.email !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.email);
        /* string profile = 5; */
        if (message.profile !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.profile);
        /* umlquiz.MemgerShip membership = 6; */
        if (message.membership !== 0)
            writer.tag(6, WireType.Varint).int32(message.membership);
        /* repeated string liked_quiz_ids = 7; */
        for (let i = 0; i < message.likedQuizIds.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.likedQuizIds[i]);
        /* repeated string quiz_history = 8; */
        for (let i = 0; i < message.quizHistory.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.quizHistory[i]);
        /* google.type.DateTime created_at = 9; */
        if (message.createdAt)
            DateTime.internalBinaryWrite(message.createdAt, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* google.type.DateTime updated_at = 10; */
        if (message.updatedAt)
            DateTime.internalBinaryWrite(message.updatedAt, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Quiz$Type extends MessageType<Quiz> {
    constructor() {
        super("umlquiz.Quiz", [
            { no: 1, name: "quiz_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["umlquiz.QuizStatus", QuizStatus] },
            { no: 4, name: "diagram_type", kind: "enum", T: () => ["umlquiz.DiagramType", DiagramType] },
            { no: 5, name: "level", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "diagram", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "likes", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "author_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "created_at", kind: "message", T: () => DateTime },
            { no: 12, name: "updated_at", kind: "message", T: () => DateTime }
        ]);
    }
    create(value?: PartialMessage<Quiz>): Quiz {
        const message = { quizId: "", language: "", status: 0, diagramType: 0, level: "", title: "", text: "", diagram: "", likes: 0, authorId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Quiz>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Quiz): Quiz {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quiz_id */ 1:
                    message.quizId = reader.string();
                    break;
                case /* string language */ 2:
                    message.language = reader.string();
                    break;
                case /* umlquiz.QuizStatus status */ 3:
                    message.status = reader.int32();
                    break;
                case /* umlquiz.DiagramType diagram_type */ 4:
                    message.diagramType = reader.int32();
                    break;
                case /* string level */ 5:
                    message.level = reader.string();
                    break;
                case /* string title */ 6:
                    message.title = reader.string();
                    break;
                case /* string text */ 7:
                    message.text = reader.string();
                    break;
                case /* string diagram */ 8:
                    message.diagram = reader.string();
                    break;
                case /* int32 likes */ 9:
                    message.likes = reader.int32();
                    break;
                case /* string author_id */ 10:
                    message.authorId = reader.string();
                    break;
                case /* google.type.DateTime created_at */ 11:
                    message.createdAt = DateTime.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.type.DateTime updated_at */ 12:
                    message.updatedAt = DateTime.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Quiz, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quiz_id = 1; */
        if (message.quizId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quizId);
        /* string language = 2; */
        if (message.language !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.language);
        /* umlquiz.QuizStatus status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* umlquiz.DiagramType diagram_type = 4; */
        if (message.diagramType !== 0)
            writer.tag(4, WireType.Varint).int32(message.diagramType);
        /* string level = 5; */
        if (message.level !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.level);
        /* string title = 6; */
        if (message.title !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.title);
        /* string text = 7; */
        if (message.text !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.text);
        /* string diagram = 8; */
        if (message.diagram !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.diagram);
        /* int32 likes = 9; */
        if (message.likes !== 0)
            writer.tag(9, WireType.Varint).int32(message.likes);
        /* string author_id = 10; */
        if (message.authorId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.authorId);
        /* google.type.DateTime created_at = 11; */
        if (message.createdAt)
            DateTime.internalBinaryWrite(message.createdAt, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* google.type.DateTime updated_at = 12; */
        if (message.updatedAt)
            DateTime.internalBinaryWrite(message.updatedAt, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.Quiz
 */
export const Quiz = new Quiz$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Report$Type extends MessageType<Report> {
    constructor() {
        super("umlquiz.Report", [
            { no: 1, name: "report_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "quiz_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "author_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "diagram", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "created_at", kind: "message", T: () => DateTime }
        ]);
    }
    create(value?: PartialMessage<Report>): Report {
        const message = { reportId: "", quizId: "", language: "", authorId: "", title: "", text: "", diagram: "", comment: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Report>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Report): Report {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string report_id */ 1:
                    message.reportId = reader.string();
                    break;
                case /* string quiz_id */ 2:
                    message.quizId = reader.string();
                    break;
                case /* string language */ 3:
                    message.language = reader.string();
                    break;
                case /* string author_id */ 4:
                    message.authorId = reader.string();
                    break;
                case /* string title */ 5:
                    message.title = reader.string();
                    break;
                case /* string text */ 6:
                    message.text = reader.string();
                    break;
                case /* string diagram */ 7:
                    message.diagram = reader.string();
                    break;
                case /* string comment */ 8:
                    message.comment = reader.string();
                    break;
                case /* google.type.DateTime created_at */ 9:
                    message.createdAt = DateTime.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Report, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string report_id = 1; */
        if (message.reportId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.reportId);
        /* string quiz_id = 2; */
        if (message.quizId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.quizId);
        /* string language = 3; */
        if (message.language !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.language);
        /* string author_id = 4; */
        if (message.authorId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.authorId);
        /* string title = 5; */
        if (message.title !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.title);
        /* string text = 6; */
        if (message.text !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.text);
        /* string diagram = 7; */
        if (message.diagram !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.diagram);
        /* string comment = 8; */
        if (message.comment !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.comment);
        /* google.type.DateTime created_at = 9; */
        if (message.createdAt)
            DateTime.internalBinaryWrite(message.createdAt, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.Report
 */
export const Report = new Report$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddUserRequest$Type extends MessageType<AddUserRequest> {
    constructor() {
        super("umlquiz.AddUserRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddUserRequest>): AddUserRequest {
        const message = { username: "", password: "", email: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddUserRequest): AddUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.AddUserRequest
 */
export const AddUserRequest = new AddUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserRequest$Type extends MessageType<UpdateUserRequest> {
    constructor() {
        super("umlquiz.UpdateUserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "profile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "membership", kind: "enum", T: () => ["umlquiz.MemgerShip", MemgerShip] }
        ]);
    }
    create(value?: PartialMessage<UpdateUserRequest>): UpdateUserRequest {
        const message = { userId: "", username: "", password: "", email: "", profile: "", membership: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserRequest): UpdateUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* string password */ 3:
                    message.password = reader.string();
                    break;
                case /* string email */ 4:
                    message.email = reader.string();
                    break;
                case /* string profile */ 5:
                    message.profile = reader.string();
                    break;
                case /* umlquiz.MemgerShip membership */ 6:
                    message.membership = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* string password = 3; */
        if (message.password !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.password);
        /* string email = 4; */
        if (message.email !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.email);
        /* string profile = 5; */
        if (message.profile !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.profile);
        /* umlquiz.MemgerShip membership = 6; */
        if (message.membership !== 0)
            writer.tag(6, WireType.Varint).int32(message.membership);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.UpdateUserRequest
 */
export const UpdateUserRequest = new UpdateUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserRequest$Type extends MessageType<UserRequest> {
    constructor() {
        super("umlquiz.UserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserRequest>): UserRequest {
        const message = { userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserRequest): UserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.UserRequest
 */
export const UserRequest = new UserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddQuizRequest$Type extends MessageType<AddQuizRequest> {
    constructor() {
        super("umlquiz.AddQuizRequest", [
            { no: 1, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "diagram_type", kind: "enum", T: () => ["umlquiz.DiagramType", DiagramType] },
            { no: 3, name: "level", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "diagram", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "author_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddQuizRequest>): AddQuizRequest {
        const message = { language: "", diagramType: 0, level: "", title: "", text: "", diagram: "", authorId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddQuizRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddQuizRequest): AddQuizRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string language */ 1:
                    message.language = reader.string();
                    break;
                case /* umlquiz.DiagramType diagram_type */ 2:
                    message.diagramType = reader.int32();
                    break;
                case /* string level */ 3:
                    message.level = reader.string();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string text */ 5:
                    message.text = reader.string();
                    break;
                case /* string diagram */ 6:
                    message.diagram = reader.string();
                    break;
                case /* string author_id */ 7:
                    message.authorId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddQuizRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string language = 1; */
        if (message.language !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.language);
        /* umlquiz.DiagramType diagram_type = 2; */
        if (message.diagramType !== 0)
            writer.tag(2, WireType.Varint).int32(message.diagramType);
        /* string level = 3; */
        if (message.level !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.level);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string text = 5; */
        if (message.text !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.text);
        /* string diagram = 6; */
        if (message.diagram !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.diagram);
        /* string author_id = 7; */
        if (message.authorId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.authorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.AddQuizRequest
 */
export const AddQuizRequest = new AddQuizRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindQuizRequest$Type extends MessageType<FindQuizRequest> {
    constructor() {
        super("umlquiz.FindQuizRequest", [
            { no: 1, name: "quiz_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FindQuizRequest>): FindQuizRequest {
        const message = { quizId: "", language: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FindQuizRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindQuizRequest): FindQuizRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quiz_id */ 1:
                    message.quizId = reader.string();
                    break;
                case /* string language */ 2:
                    message.language = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FindQuizRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quiz_id = 1; */
        if (message.quizId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quizId);
        /* string language = 2; */
        if (message.language !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.language);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.FindQuizRequest
 */
export const FindQuizRequest = new FindQuizRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateQuizRequest$Type extends MessageType<UpdateQuizRequest> {
    constructor() {
        super("umlquiz.UpdateQuizRequest", [
            { no: 1, name: "quiz_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["umlquiz.QuizStatus", QuizStatus] },
            { no: 4, name: "diagram_type", kind: "enum", T: () => ["umlquiz.DiagramType", DiagramType] },
            { no: 5, name: "level", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "diagram", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "likes", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateQuizRequest>): UpdateQuizRequest {
        const message = { quizId: "", language: "", status: 0, diagramType: 0, level: "", title: "", text: "", diagram: "", likes: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateQuizRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateQuizRequest): UpdateQuizRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quiz_id */ 1:
                    message.quizId = reader.string();
                    break;
                case /* string language */ 2:
                    message.language = reader.string();
                    break;
                case /* umlquiz.QuizStatus status */ 3:
                    message.status = reader.int32();
                    break;
                case /* umlquiz.DiagramType diagram_type */ 4:
                    message.diagramType = reader.int32();
                    break;
                case /* string level */ 5:
                    message.level = reader.string();
                    break;
                case /* string title */ 6:
                    message.title = reader.string();
                    break;
                case /* string text */ 7:
                    message.text = reader.string();
                    break;
                case /* string diagram */ 8:
                    message.diagram = reader.string();
                    break;
                case /* int32 likes */ 9:
                    message.likes = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateQuizRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quiz_id = 1; */
        if (message.quizId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quizId);
        /* string language = 2; */
        if (message.language !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.language);
        /* umlquiz.QuizStatus status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* umlquiz.DiagramType diagram_type = 4; */
        if (message.diagramType !== 0)
            writer.tag(4, WireType.Varint).int32(message.diagramType);
        /* string level = 5; */
        if (message.level !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.level);
        /* string title = 6; */
        if (message.title !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.title);
        /* string text = 7; */
        if (message.text !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.text);
        /* string diagram = 8; */
        if (message.diagram !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.diagram);
        /* int32 likes = 9; */
        if (message.likes !== 0)
            writer.tag(9, WireType.Varint).int32(message.likes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.UpdateQuizRequest
 */
export const UpdateQuizRequest = new UpdateQuizRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteQuizRequest$Type extends MessageType<DeleteQuizRequest> {
    constructor() {
        super("umlquiz.DeleteQuizRequest", [
            { no: 1, name: "quiz_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteQuizRequest>): DeleteQuizRequest {
        const message = { quizId: "", language: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteQuizRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteQuizRequest): DeleteQuizRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quiz_id */ 1:
                    message.quizId = reader.string();
                    break;
                case /* string language */ 2:
                    message.language = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteQuizRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quiz_id = 1; */
        if (message.quizId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quizId);
        /* string language = 2; */
        if (message.language !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.language);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.DeleteQuizRequest
 */
export const DeleteQuizRequest = new DeleteQuizRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListQuizzesAllRequest$Type extends MessageType<ListQuizzesAllRequest> {
    constructor() {
        super("umlquiz.ListQuizzesAllRequest", [
            { no: 1, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["umlquiz.QuizStatus", QuizStatus] }
        ]);
    }
    create(value?: PartialMessage<ListQuizzesAllRequest>): ListQuizzesAllRequest {
        const message = { language: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListQuizzesAllRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQuizzesAllRequest): ListQuizzesAllRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string language */ 1:
                    message.language = reader.string();
                    break;
                case /* umlquiz.QuizStatus status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQuizzesAllRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string language = 1; */
        if (message.language !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.language);
        /* umlquiz.QuizStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.ListQuizzesAllRequest
 */
export const ListQuizzesAllRequest = new ListQuizzesAllRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListQuizzesByUserRequest$Type extends MessageType<ListQuizzesByUserRequest> {
    constructor() {
        super("umlquiz.ListQuizzesByUserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["umlquiz.QuizStatus", QuizStatus] }
        ]);
    }
    create(value?: PartialMessage<ListQuizzesByUserRequest>): ListQuizzesByUserRequest {
        const message = { userId: "", language: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListQuizzesByUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQuizzesByUserRequest): ListQuizzesByUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string language */ 2:
                    message.language = reader.string();
                    break;
                case /* umlquiz.QuizStatus status */ 3:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQuizzesByUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string language = 2; */
        if (message.language !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.language);
        /* umlquiz.QuizStatus status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.ListQuizzesByUserRequest
 */
export const ListQuizzesByUserRequest = new ListQuizzesByUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SolveQuizRequest$Type extends MessageType<SolveQuizRequest> {
    constructor() {
        super("umlquiz.SolveQuizRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "quiz_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "diagram", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SolveQuizRequest>): SolveQuizRequest {
        const message = { userId: "", quizId: "", language: "", diagram: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SolveQuizRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SolveQuizRequest): SolveQuizRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string quiz_id */ 2:
                    message.quizId = reader.string();
                    break;
                case /* string language */ 3:
                    message.language = reader.string();
                    break;
                case /* string diagram */ 4:
                    message.diagram = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SolveQuizRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string quiz_id = 2; */
        if (message.quizId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.quizId);
        /* string language = 3; */
        if (message.language !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.language);
        /* string diagram = 4; */
        if (message.diagram !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.diagram);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.SolveQuizRequest
 */
export const SolveQuizRequest = new SolveQuizRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeQuizRequest$Type extends MessageType<LikeQuizRequest> {
    constructor() {
        super("umlquiz.LikeQuizRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "quiz_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "diff_like", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LikeQuizRequest>): LikeQuizRequest {
        const message = { userId: "", quizId: "", language: "", diffLike: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LikeQuizRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LikeQuizRequest): LikeQuizRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string quiz_id */ 2:
                    message.quizId = reader.string();
                    break;
                case /* string language */ 3:
                    message.language = reader.string();
                    break;
                case /* int32 diff_like */ 4:
                    message.diffLike = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LikeQuizRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string quiz_id = 2; */
        if (message.quizId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.quizId);
        /* string language = 3; */
        if (message.language !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.language);
        /* int32 diff_like = 4; */
        if (message.diffLike !== 0)
            writer.tag(4, WireType.Varint).int32(message.diffLike);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.LikeQuizRequest
 */
export const LikeQuizRequest = new LikeQuizRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddReportRequest$Type extends MessageType<AddReportRequest> {
    constructor() {
        super("umlquiz.AddReportRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "quiz_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "diagram", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddReportRequest>): AddReportRequest {
        const message = { userId: "", quizId: "", language: "", title: "", text: "", diagram: "", comment: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddReportRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddReportRequest): AddReportRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string quiz_id */ 2:
                    message.quizId = reader.string();
                    break;
                case /* string language */ 3:
                    message.language = reader.string();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string text */ 5:
                    message.text = reader.string();
                    break;
                case /* string diagram */ 6:
                    message.diagram = reader.string();
                    break;
                case /* string comment */ 7:
                    message.comment = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddReportRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string quiz_id = 2; */
        if (message.quizId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.quizId);
        /* string language = 3; */
        if (message.language !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.language);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string text = 5; */
        if (message.text !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.text);
        /* string diagram = 6; */
        if (message.diagram !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.diagram);
        /* string comment = 7; */
        if (message.comment !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.comment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.AddReportRequest
 */
export const AddReportRequest = new AddReportRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindReportsRequest$Type extends MessageType<FindReportsRequest> {
    constructor() {
        super("umlquiz.FindReportsRequest", [
            { no: 1, name: "quiz_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FindReportsRequest>): FindReportsRequest {
        const message = { quizId: "", language: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FindReportsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindReportsRequest): FindReportsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quiz_id */ 1:
                    message.quizId = reader.string();
                    break;
                case /* string language */ 2:
                    message.language = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FindReportsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quiz_id = 1; */
        if (message.quizId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quizId);
        /* string language = 2; */
        if (message.language !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.language);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.FindReportsRequest
 */
export const FindReportsRequest = new FindReportsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateReportRequest$Type extends MessageType<UpdateReportRequest> {
    constructor() {
        super("umlquiz.UpdateReportRequest", [
            { no: 1, name: "report_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "diagram", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateReportRequest>): UpdateReportRequest {
        const message = { reportId: "", title: "", text: "", diagram: "", comment: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateReportRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateReportRequest): UpdateReportRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string report_id */ 1:
                    message.reportId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* string diagram */ 4:
                    message.diagram = reader.string();
                    break;
                case /* string comment */ 5:
                    message.comment = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateReportRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string report_id = 1; */
        if (message.reportId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.reportId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* string diagram = 4; */
        if (message.diagram !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.diagram);
        /* string comment = 5; */
        if (message.comment !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.comment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.UpdateReportRequest
 */
export const UpdateReportRequest = new UpdateReportRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteReportRequest$Type extends MessageType<DeleteReportRequest> {
    constructor() {
        super("umlquiz.DeleteReportRequest", [
            { no: 1, name: "report_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteReportRequest>): DeleteReportRequest {
        const message = { reportId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteReportRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteReportRequest): DeleteReportRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string report_id */ 1:
                    message.reportId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteReportRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string report_id = 1; */
        if (message.reportId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.reportId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.DeleteReportRequest
 */
export const DeleteReportRequest = new DeleteReportRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserResponse$Type extends MessageType<UserResponse> {
    constructor() {
        super("umlquiz.UserResponse", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserResponse>): UserResponse {
        const message = { error: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserResponse): UserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* umlquiz.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string error */ 2:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* umlquiz.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error = 2; */
        if (message.error !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.UserResponse
 */
export const UserResponse = new UserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuizResponse$Type extends MessageType<QuizResponse> {
    constructor() {
        super("umlquiz.QuizResponse", [
            { no: 1, name: "quiz", kind: "message", T: () => Quiz },
            { no: 2, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QuizResponse>): QuizResponse {
        const message = { error: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuizResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuizResponse): QuizResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* umlquiz.Quiz quiz */ 1:
                    message.quiz = Quiz.internalBinaryRead(reader, reader.uint32(), options, message.quiz);
                    break;
                case /* string error */ 2:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuizResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* umlquiz.Quiz quiz = 1; */
        if (message.quiz)
            Quiz.internalBinaryWrite(message.quiz, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error = 2; */
        if (message.error !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.QuizResponse
 */
export const QuizResponse = new QuizResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportResponse$Type extends MessageType<ReportResponse> {
    constructor() {
        super("umlquiz.ReportResponse", [
            { no: 1, name: "report", kind: "message", T: () => Report },
            { no: 2, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReportResponse>): ReportResponse {
        const message = { error: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportResponse): ReportResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* umlquiz.Report report */ 1:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* string error */ 2:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* umlquiz.Report report = 1; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error = 2; */
        if (message.error !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.ReportResponse
 */
export const ReportResponse = new ReportResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuizzesResponse$Type extends MessageType<QuizzesResponse> {
    constructor() {
        super("umlquiz.QuizzesResponse", [
            { no: 1, name: "quiz", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Quiz },
            { no: 2, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QuizzesResponse>): QuizzesResponse {
        const message = { quiz: [], error: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuizzesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuizzesResponse): QuizzesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated umlquiz.Quiz quiz */ 1:
                    message.quiz.push(Quiz.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string error */ 2:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuizzesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated umlquiz.Quiz quiz = 1; */
        for (let i = 0; i < message.quiz.length; i++)
            Quiz.internalBinaryWrite(message.quiz[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error = 2; */
        if (message.error !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.QuizzesResponse
 */
export const QuizzesResponse = new QuizzesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportsResponse$Type extends MessageType<ReportsResponse> {
    constructor() {
        super("umlquiz.ReportsResponse", [
            { no: 1, name: "report", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Report },
            { no: 2, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReportsResponse>): ReportsResponse {
        const message = { report: [], error: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportsResponse): ReportsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated umlquiz.Report report */ 1:
                    message.report.push(Report.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string error */ 2:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated umlquiz.Report report = 1; */
        for (let i = 0; i < message.report.length; i++)
            Report.internalBinaryWrite(message.report[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error = 2; */
        if (message.error !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.ReportsResponse
 */
export const ReportsResponse = new ReportsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SolveResponse$Type extends MessageType<SolveResponse> {
    constructor() {
        super("umlquiz.SolveResponse", [
            { no: 1, name: "diff", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SolveResponse>): SolveResponse {
        const message = { diff: "", error: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SolveResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SolveResponse): SolveResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string diff */ 1:
                    message.diff = reader.string();
                    break;
                case /* string error */ 2:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SolveResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string diff = 1; */
        if (message.diff !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.diff);
        /* string error = 2; */
        if (message.error !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.SolveResponse
 */
export const SolveResponse = new SolveResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ErrorResponse$Type extends MessageType<ErrorResponse> {
    constructor() {
        super("umlquiz.ErrorResponse", [
            { no: 1, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ErrorResponse>): ErrorResponse {
        const message = { error: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ErrorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ErrorResponse): ErrorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error */ 1:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ErrorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error = 1; */
        if (message.error !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message umlquiz.ErrorResponse
 */
export const ErrorResponse = new ErrorResponse$Type();
/**
 * @generated ServiceType for protobuf service umlquiz.UMLQuizService
 */
export const UMLQuizService = new ServiceType("umlquiz.UMLQuizService", [
    { name: "AddUser", options: {}, I: AddUserRequest, O: UserResponse },
    { name: "UpdateUser", options: {}, I: UpdateUserRequest, O: UserResponse },
    { name: "FindUser", options: {}, I: UserRequest, O: UserResponse },
    { name: "DeleteUser", options: {}, I: UserRequest, O: ErrorResponse },
    { name: "AddQuiz", options: {}, I: AddQuizRequest, O: QuizResponse },
    { name: "FindQuiz", options: {}, I: FindQuizRequest, O: QuizResponse },
    { name: "UpdateQuiz", options: {}, I: UpdateQuizRequest, O: QuizResponse },
    { name: "DeleteQuiz", options: {}, I: DeleteQuizRequest, O: ErrorResponse },
    { name: "ListQuizzesAll", options: {}, I: ListQuizzesAllRequest, O: QuizzesResponse },
    { name: "ListQuizzesByUser", options: {}, I: ListQuizzesByUserRequest, O: QuizzesResponse },
    { name: "SolveQuiz", options: {}, I: SolveQuizRequest, O: SolveResponse },
    { name: "LikeQuiz", options: {}, I: LikeQuizRequest, O: ErrorResponse },
    { name: "AddReport", options: {}, I: AddReportRequest, O: ReportResponse },
    { name: "FindReports", options: {}, I: FindReportsRequest, O: ReportsResponse },
    { name: "UpdateReport", options: {}, I: UpdateReportRequest, O: ReportResponse },
    { name: "DeleteReport", options: {}, I: DeleteReportRequest, O: ErrorResponse }
]);
